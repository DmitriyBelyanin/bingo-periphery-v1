/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ZkBingoFeeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AMPLIFY"
      | "afterGameTimeOut"
      | "afterGameWon"
      | "beforeJoin"
      | "bingoToken"
      | "feeInfo"
      | "gameFee"
      | "gameInputPer"
      | "getGameFee"
      | "getGameFeeRatio"
      | "getGameInputPer"
      | "initialize"
      | "leave"
      | "lobby"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setBingoToken"
      | "setGameInputPer"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AafterGameWon"
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "OwnershipTransferred"
      | "UpdateInputPer"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AMPLIFY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "afterGameTimeOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "afterGameWon",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeJoin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bingoToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameInputPer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInputPer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "leave", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "lobby", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBingoToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameInputPer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "AMPLIFY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterGameTimeOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterGameWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bingoToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameInputPer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGameFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInputPer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lobby", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBingoToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameInputPer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
}

export namespace AafterGameWonEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    counts: BigNumberish,
    joinAmount: BigNumberish,
    winner: AddressLike,
    winAmount: BigNumberish,
    feeAmount: BigNumberish,
    feeRatio: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    counts: bigint,
    joinAmount: bigint,
    winner: string,
    winAmount: bigint,
    feeAmount: bigint,
    feeRatio: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    counts: bigint;
    joinAmount: bigint;
    winner: string;
    winAmount: bigint;
    feeAmount: bigint;
    feeRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateInputPerEvent {
  export type InputTuple = [
    oldInputPer: BigNumberish,
    newInputPer: BigNumberish
  ];
  export type OutputTuple = [oldInputPer: bigint, newInputPer: bigint];
  export interface OutputObject {
    oldInputPer: bigint;
    newInputPer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZkBingoFee extends BaseContract {
  connect(runner?: ContractRunner | null): ZkBingoFee;
  waitForDeployment(): Promise<this>;

  interface: ZkBingoFeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AMPLIFY: TypedContractMethod<[], [bigint], "view">;

  afterGameTimeOut: TypedContractMethod<
    [gameId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  afterGameWon: TypedContractMethod<
    [gameId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  beforeJoin: TypedContractMethod<[from: AddressLike], [void], "nonpayable">;

  bingoToken: TypedContractMethod<[], [string], "view">;

  feeInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        income: bigint;
        repayment: bigint;
        withdraw: bigint;
        balance: bigint;
      }
    ],
    "view"
  >;

  gameFee: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        counts: bigint;
        joinAmount: bigint;
        winner: string;
        winAmount: bigint;
        feeAmount: bigint;
        feeRatio: bigint;
      }
    ],
    "view"
  >;

  gameInputPer: TypedContractMethod<[], [bigint], "view">;

  getGameFee: TypedContractMethod<
    [gameId: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getGameFeeRatio: TypedContractMethod<[], [bigint], "view">;

  getGameInputPer: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [lobby_: AddressLike, bingoToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  leave: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  lobby: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBingoToken: TypedContractMethod<
    [bingoToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  setGameInputPer: TypedContractMethod<
    [inputPer: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdrawFee: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AMPLIFY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "afterGameTimeOut"
  ): TypedContractMethod<[gameId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "afterGameWon"
  ): TypedContractMethod<
    [gameId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeJoin"
  ): TypedContractMethod<[from: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bingoToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        income: bigint;
        repayment: bigint;
        withdraw: bigint;
        balance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameFee"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        counts: bigint;
        joinAmount: bigint;
        winner: string;
        winAmount: bigint;
        feeAmount: bigint;
        feeRatio: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameInputPer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameFee"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameFeeRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameInputPer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [lobby_: AddressLike, bingoToken_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leave"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lobby"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBingoToken"
  ): TypedContractMethod<[bingoToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGameInputPer"
  ): TypedContractMethod<[inputPer: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AafterGameWon"
  ): TypedContractEvent<
    AafterGameWonEvent.InputTuple,
    AafterGameWonEvent.OutputTuple,
    AafterGameWonEvent.OutputObject
  >;
  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateInputPer"
  ): TypedContractEvent<
    UpdateInputPerEvent.InputTuple,
    UpdateInputPerEvent.OutputTuple,
    UpdateInputPerEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AafterGameWon(uint256,uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      AafterGameWonEvent.InputTuple,
      AafterGameWonEvent.OutputTuple,
      AafterGameWonEvent.OutputObject
    >;
    AafterGameWon: TypedContractEvent<
      AafterGameWonEvent.InputTuple,
      AafterGameWonEvent.OutputTuple,
      AafterGameWonEvent.OutputObject
    >;

    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdateInputPer(uint256,uint256)": TypedContractEvent<
      UpdateInputPerEvent.InputTuple,
      UpdateInputPerEvent.OutputTuple,
      UpdateInputPerEvent.OutputObject
    >;
    UpdateInputPer: TypedContractEvent<
      UpdateInputPerEvent.InputTuple,
      UpdateInputPerEvent.OutputTuple,
      UpdateInputPerEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
