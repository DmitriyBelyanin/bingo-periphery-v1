/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IBingoRoom {
  export type ParticipantStruct = {
    user: AddressLike;
    cardId: BigNumberish;
    isAbandoned: boolean;
  };

  export type ParticipantStructOutput = [
    user: string,
    cardId: bigint,
    isAbandoned: boolean
  ] & { user: string; cardId: bigint; isAbandoned: boolean };

  export type GameRoundStruct = {
    round: BigNumberish;
    number: BigNumberish;
    timestamp: BigNumberish;
    player: AddressLike;
  };

  export type GameRoundStructOutput = [
    round: bigint,
    number: bigint,
    timestamp: bigint,
    player: string
  ] & { round: bigint; number: bigint; timestamp: bigint; player: string };

  export type GameSettingsStruct = {
    betSize: BigNumberish;
    expectedLines: BigNumberish;
    minNumber: BigNumberish;
    maxNumber: BigNumberish;
  };

  export type GameSettingsStructOutput = [
    betSize: bigint,
    expectedLines: bigint,
    minNumber: bigint,
    maxNumber: bigint
  ] & {
    betSize: bigint;
    expectedLines: bigint;
    minNumber: bigint;
    maxNumber: bigint;
  };
}

export interface IBingoRoomInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "abandon"
      | "bingo"
      | "gameCard"
      | "gamePlayerCounts"
      | "getCurrentRound"
      | "getGameInfo"
      | "getSelectedNumbers"
      | "restoreGame"
      | "selectAndBingo"
      | "selectNumber"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Bingo"
      | "GameHalted"
      | "GameParticipated"
      | "GameStarted"
      | "NumberSelected"
      | "RewardChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "abandon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bingo",
    values: [BigNumberish, BigNumberish[][], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gameCard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gamePlayerCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSelectedNumbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreGame",
    values: [AddressLike, BigNumberish[][], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectAndBingo",
    values: [BigNumberish, BigNumberish, BigNumberish[][], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectNumber",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "abandon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bingo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameCard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gamePlayerCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelectedNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectAndBingo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectNumber",
    data: BytesLike
  ): Result;
}

export namespace BingoEvent {
  export type InputTuple = [gameId: BigNumberish, player: AddressLike];
  export type OutputTuple = [gameId: bigint, player: string];
  export interface OutputObject {
    gameId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameHaltedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    user: AddressLike,
    isOvertime: boolean,
    confiscate: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    user: string,
    isOvertime: boolean,
    confiscate: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    user: string;
    isOvertime: boolean;
    confiscate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameParticipatedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    cardId: BigNumberish,
    position: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    player: string,
    cardId: bigint,
    position: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    cardId: bigint;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    cardContract: AddressLike,
    players: AddressLike[]
  ];
  export type OutputTuple = [
    gameId: bigint,
    cardContract: string,
    players: string[]
  ];
  export interface OutputObject {
    gameId: bigint;
    cardContract: string;
    players: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NumberSelectedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    round: BigNumberish,
    player: AddressLike,
    number: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    round: bigint,
    player: string,
    number: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    round: bigint;
    player: string;
    number: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardChangedEvent {
  export type InputTuple = [newReward: AddressLike, oldReward: AddressLike];
  export type OutputTuple = [newReward: string, oldReward: string];
  export interface OutputObject {
    newReward: string;
    oldReward: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBingoRoom extends BaseContract {
  connect(runner?: ContractRunner | null): IBingoRoom;
  waitForDeployment(): Promise<this>;

  interface: IBingoRoomInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  abandon: TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;

  bingo: TypedContractMethod<
    [
      gameId: BigNumberish,
      cardNumbers: BigNumberish[][],
      signedLabel: BytesLike
    ],
    [void],
    "payable"
  >;

  gameCard: TypedContractMethod<[], [string], "view">;

  gamePlayerCounts: TypedContractMethod<
    [gameId: BigNumberish],
    [bigint],
    "view"
  >;

  getCurrentRound: TypedContractMethod<
    [gameId: BigNumberish],
    [
      [bigint, string, bigint, string] & {
        round: bigint;
        player: string;
        remain: bigint;
        status: string;
      }
    ],
    "view"
  >;

  getGameInfo: TypedContractMethod<
    [gameId: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        IBingoRoom.ParticipantStructOutput[],
        IBingoRoom.GameRoundStructOutput[],
        IBingoRoom.GameSettingsStructOutput,
        string
      ] & {
        startedAt: bigint;
        endedAt: bigint;
        winner: string;
        winAmount: bigint;
        players: IBingoRoom.ParticipantStructOutput[];
        rounds: IBingoRoom.GameRoundStructOutput[];
        settings: IBingoRoom.GameSettingsStructOutput;
        status: string;
      }
    ],
    "view"
  >;

  getSelectedNumbers: TypedContractMethod<
    [gameId: BigNumberish],
    [bigint[]],
    "view"
  >;

  restoreGame: TypedContractMethod<
    [
      player: AddressLike,
      cardNumbers: BigNumberish[][],
      signedGameLabel: BytesLike
    ],
    [
      [bigint, bigint, boolean] & {
        playingGameId: bigint;
        autoEndTime: bigint;
        isCardContentMatched: boolean;
      }
    ],
    "nonpayable"
  >;

  selectAndBingo: TypedContractMethod<
    [
      gameId: BigNumberish,
      number: BigNumberish,
      cardNumbers: BigNumberish[][],
      signedLabel: BytesLike
    ],
    [void],
    "payable"
  >;

  selectNumber: TypedContractMethod<
    [gameId: BigNumberish, number: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "abandon"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bingo"
  ): TypedContractMethod<
    [
      gameId: BigNumberish,
      cardNumbers: BigNumberish[][],
      signedLabel: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "gameCard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gamePlayerCounts"
  ): TypedContractMethod<[gameId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRound"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [
      [bigint, string, bigint, string] & {
        round: bigint;
        player: string;
        remain: bigint;
        status: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        IBingoRoom.ParticipantStructOutput[],
        IBingoRoom.GameRoundStructOutput[],
        IBingoRoom.GameSettingsStructOutput,
        string
      ] & {
        startedAt: bigint;
        endedAt: bigint;
        winner: string;
        winAmount: bigint;
        players: IBingoRoom.ParticipantStructOutput[];
        rounds: IBingoRoom.GameRoundStructOutput[];
        settings: IBingoRoom.GameSettingsStructOutput;
        status: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSelectedNumbers"
  ): TypedContractMethod<[gameId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "restoreGame"
  ): TypedContractMethod<
    [
      player: AddressLike,
      cardNumbers: BigNumberish[][],
      signedGameLabel: BytesLike
    ],
    [
      [bigint, bigint, boolean] & {
        playingGameId: bigint;
        autoEndTime: bigint;
        isCardContentMatched: boolean;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectAndBingo"
  ): TypedContractMethod<
    [
      gameId: BigNumberish,
      number: BigNumberish,
      cardNumbers: BigNumberish[][],
      signedLabel: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "selectNumber"
  ): TypedContractMethod<
    [gameId: BigNumberish, number: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Bingo"
  ): TypedContractEvent<
    BingoEvent.InputTuple,
    BingoEvent.OutputTuple,
    BingoEvent.OutputObject
  >;
  getEvent(
    key: "GameHalted"
  ): TypedContractEvent<
    GameHaltedEvent.InputTuple,
    GameHaltedEvent.OutputTuple,
    GameHaltedEvent.OutputObject
  >;
  getEvent(
    key: "GameParticipated"
  ): TypedContractEvent<
    GameParticipatedEvent.InputTuple,
    GameParticipatedEvent.OutputTuple,
    GameParticipatedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "NumberSelected"
  ): TypedContractEvent<
    NumberSelectedEvent.InputTuple,
    NumberSelectedEvent.OutputTuple,
    NumberSelectedEvent.OutputObject
  >;
  getEvent(
    key: "RewardChanged"
  ): TypedContractEvent<
    RewardChangedEvent.InputTuple,
    RewardChangedEvent.OutputTuple,
    RewardChangedEvent.OutputObject
  >;

  filters: {
    "Bingo(uint256,address)": TypedContractEvent<
      BingoEvent.InputTuple,
      BingoEvent.OutputTuple,
      BingoEvent.OutputObject
    >;
    Bingo: TypedContractEvent<
      BingoEvent.InputTuple,
      BingoEvent.OutputTuple,
      BingoEvent.OutputObject
    >;

    "GameHalted(uint256,address,bool,uint256)": TypedContractEvent<
      GameHaltedEvent.InputTuple,
      GameHaltedEvent.OutputTuple,
      GameHaltedEvent.OutputObject
    >;
    GameHalted: TypedContractEvent<
      GameHaltedEvent.InputTuple,
      GameHaltedEvent.OutputTuple,
      GameHaltedEvent.OutputObject
    >;

    "GameParticipated(uint256,address,uint256,uint8)": TypedContractEvent<
      GameParticipatedEvent.InputTuple,
      GameParticipatedEvent.OutputTuple,
      GameParticipatedEvent.OutputObject
    >;
    GameParticipated: TypedContractEvent<
      GameParticipatedEvent.InputTuple,
      GameParticipatedEvent.OutputTuple,
      GameParticipatedEvent.OutputObject
    >;

    "GameStarted(uint256,address,address[])": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "NumberSelected(uint256,uint32,address,uint8)": TypedContractEvent<
      NumberSelectedEvent.InputTuple,
      NumberSelectedEvent.OutputTuple,
      NumberSelectedEvent.OutputObject
    >;
    NumberSelected: TypedContractEvent<
      NumberSelectedEvent.InputTuple,
      NumberSelectedEvent.OutputTuple,
      NumberSelectedEvent.OutputObject
    >;

    "RewardChanged(address,address)": TypedContractEvent<
      RewardChangedEvent.InputTuple,
      RewardChangedEvent.OutputTuple,
      RewardChangedEvent.OutputObject
    >;
    RewardChanged: TypedContractEvent<
      RewardChangedEvent.InputTuple,
      RewardChangedEvent.OutputTuple,
      RewardChangedEvent.OutputObject
    >;
  };
}
